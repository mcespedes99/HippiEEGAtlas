#---- begin snakebids boilerplate ----------------------------------------------

import snakebids
from snakebids import bids
from os.path import join
from itertools import compress
import numpy as np
import sys
sys.path.append('/scratch/mcesped/HippiEEGAtlas/epochs/hippieeg/code')
from file_manager import bids_folder


configfile: workflow.source_path('../config/snakebids.yml')

# Get input wildcards
inputs = snakebids.generate_inputs(
    bids_dir=config["bids_dir"],
    pybids_inputs=config["pybids_inputs"],
    pybids_database_dir=config.get("pybids_db_dir"),
    pybids_reset_database=config.get("pybids_db_reset"),
    derivatives=config.get("derivatives", None),
    participant_label=config.get("participant_label", None),
    exclude_participant_label=config.get("exclude_participant_label", None),
    use_bids_inputs=True,
)
subj_session_list = list(zip(inputs.zip_lists['ieeg']['subject'],inputs.zip_lists['ieeg']['session']))
# Annotation files
# inputs_annot = snakebids.generate_inputs(
#     bids_dir=config["bids_dir"],
#     pybids_inputs=config["pybids_inputs_annot"],
#     pybids_database_dir=config.get("pybids_db_dir"),
#     pybids_reset_database=config.get("pybids_db_reset"),
#     derivatives=config.get("derivatives", None),
#     participant_label=config.get("participant_label", None),
#     exclude_participant_label=config.get("exclude_participant_label", None),
#     use_bids_inputs=True,
# )
# # TSV files input
# input_tsv = snakebids.generate_inputs(
#     bids_dir=config["bids_dir_tsv"],
#     pybids_inputs=config["pybids_inputs_tsv"],
#     pybids_database_dir=config.get("pybids_db_dir"),
#     pybids_reset_database=config.get("pybids_db_reset"),
#     derivatives=config.get("derivatives", None),
#     participant_label=config.get("participant_label", None),
#     exclude_participant_label=config.get("exclude_participant_label", None),
#     use_bids_inputs=True,
# )

#this adds constraints to the bids naming
wildcard_constraints:  **snakebids.get_wildcard_constraints(config['pybids_inputs'])
# print(inputs.path)
# print(inputs.zip_lists['bold']['run'])
# print(inputs.zip_lists['bold']['task'])
# print(subj_session_list)
# print(inputs.zip_lists['bold']['subject'])
# print(inputs.zip_lists['bold']['session'])

#---- end snakebids boilerplate ------------------------------------------------
rule epochs:
    input: 
        edf = lambda wildcards: expand(inputs.path['ieeg'], zip,
	                        session = list(compress(inputs.zip_lists['ieeg']['session'],
                                        [True if subj == wildcards.subject else False for subj in inputs.zip_lists['ieeg']['subject']])),
                                task = list(compress(inputs.zip_lists['ieeg']['task'], 
                                        [True if subj == wildcards.subject else False for subj in inputs.zip_lists['ieeg']['subject']])),
                                run = list(compress(inputs.zip_lists['ieeg']['run'], 
                                        [True if subj == wildcards.subject else False for subj in inputs.zip_lists['ieeg']['subject']])),
                                allow_missing=True),
        annot = lambda wildcards: expand(inputs.path['annotations'], zip,
	                        session = list(compress(inputs.zip_lists['annotations']['session'],
                                        [True if subj == wildcards.subject else False for subj in inputs.zip_lists['annotations']['subject']])),
                                task = list(compress(inputs.zip_lists['annotations']['task'], 
                                        [True if subj == wildcards.subject else False for subj in inputs.zip_lists['annotations']['subject']])),
                                run = list(compress(inputs.zip_lists['annotations']['run'], 
                                        [True if subj == wildcards.subject else False for subj in inputs.zip_lists['annotations']['subject']])),
                                allow_missing=True),
        tsv = inputs.path['seega_tsv']
    params:
        script = join(workflow.basedir,'../code/epochs.py'),
        processes = 8
    output:
        directory(
		bids_folder(
	            root=config['output_dir'],
        	    datatype='ieeg',
        	    suffix='channels.tsv',
	            **inputs.wildcards['ieeg']
        	)
	)
    # log:
    #     bids(
    #         root='/scratch/mcesped/HippiEEGAtlas/epochs/logs',
    #         suffix='epochs.log',
    #         **inputs.wildcards['bold']
    #     )
    shell: 'python {params.script} -p {params.processes} -i {input.edf} -a {input.annot} -t {input.tsv} -o {output}'

rule all:
    input:
        expand(
            expand(
                rules.epochs.output,
                allow_missing=True,
            ),
            zip,
            **inputs.zip_lists['ieeg']
        )
    default_target: True
